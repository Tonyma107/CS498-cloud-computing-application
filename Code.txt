import csv
from google.cloud import bigtable

def main():
    # Initialize Bigtable client and table reference
    client = bigtable.Client(project="homework3-please", admin=True)
    instance = client.instance("ev-bigtable")
    table = instance.table("ev-population")
    batcher = table.mutations_batcher()

    # Open with UTF-8 encoding
    with open("Electric_Vehicle_Population_Data.csv", "r", encoding="utf-8") as csvfile:
        reader = csv.DictReader(csvfile)

        for i, row in enumerate(reader):
            try:
                # Use DOL Vehicle ID as row key
                row_key = str(row["DOL Vehicle ID"]).encode()
                direct_row = table.direct_row(row_key)

                # Convert electric range to zero-padded 5-digit string
                electric_range = int(row.get("Electric Range", "0").strip() or 0)
                electric_range_str = f"{electric_range:05d}"

                # Set Bigtable cells (UTF-8 encoded)
                direct_row.set_cell("ev_info", b"make", row.get("Make", "").encode("utf-8"))
                direct_row.set_cell("ev_info", b"model", row.get("Model", "").encode("utf-8"))
                direct_row.set_cell("ev_info", b"model_year", row.get("Model Year", "").encode("utf-8"))
                direct_row.set_cell("ev_info", b"electric_range", electric_range_str.encode("utf-8"))
                direct_row.set_cell("ev_info", b"city", row.get("City", "").encode("utf-8"))
                direct_row.set_cell("ev_info", b"county", row.get("County", "").encode("utf-8"))

                batcher.mutate(direct_row)

                if i % 5000 == 0:
                    batcher.flush()
                    print(f"Processed {i} rows")

            except Exception as e:
                print(f"Error at row {i}: {e}")

        batcher.flush()
        print("Upload completed.")

if __name__ == "__main__":
    main()

from flask import Flask
from google.cloud import bigtable
from google.cloud.bigtable import row_filters

app = Flask(__name__)

PROJECT_ID = "homework3-please"
INSTANCE_ID = "ev-bigtable"
TABLE_ID = "ev-population"
COLUMN_FAMILY = "ev_info"

def get_bigtable_table():
    client = bigtable.Client(project=PROJECT_ID, admin=True)
    instance = client.instance(INSTANCE_ID)
    return instance.table(TABLE_ID)

@app.route('/rows')
def count_rows():
    table = get_bigtable_table()
    count = 0
    for row in table.read_rows():
        count += 1
    return str(count)

@app.route('/Best-BMW')
def best_bmw():
    table = get_bigtable_table()
    count = 0
    for row in table.read_rows():
        cells = row.cells.get(COLUMN_FAMILY, {})
        make_cell = cells.get(b"make", [None])[0]
        range_cell = cells.get(b"electric_range", [None])[0]
        if make_cell and range_cell:
            try:
                make_value = make_cell.value.decode("utf-8")
                range_value = int(range_cell.value.decode("utf-8"))
            except Exception:
                continue
            if make_value == "BMW" and range_value > 100:
                count += 1
    return str(count)


@app.route('/tesla-owners')
def tesla_seattle():
    table = get_bigtable_table()
    count = 0
    for row in table.read_rows():
        cells = row.cells.get(COLUMN_FAMILY, {})
        make_cell = cells.get(b"make", [None])[0]
        city_cell = cells.get(b"city", [None])[0]
        if make_cell and city_cell:
            try:
                make_value = make_cell.value.decode("utf-8").lower().strip()
                city_value = city_cell.value.decode("utf-8").lower().strip()
            except Exception:
                continue
            if "tesla" in make_value and "seattle" in city_value:
                count += 1
    return str(count)

@app.route('/update')
def update_range():
    table = get_bigtable_table()
    target_id = "257246118"
    row_key = str(target_id).encode()
    row = table.read_row(row_key)
    if not row:
        return "Record not found", 404
    direct_row = table.direct_row(row_key)
    direct_row.set_cell(COLUMN_FAMILY, b"electric_range", b"00200")
    direct_row.commit()
    return "Success"

@app.route('/delete')
def delete_old():
    table = get_bigtable_table()
    total = 0
    deleted_count = 0
    
    # Collect rows to delete
    rows_to_delete = []
    
    for row in table.read_rows():
        total += 1
        cells = row.cells.get(COLUMN_FAMILY, {})
        year_cell = cells.get(b"model_year", [None])[0]
        
        if year_cell:
            try:
                year_value = year_cell.value.decode("utf-8").strip()
                if year_value < "2014":
                    rows_to_delete.append(row.row_key)
                    deleted_count += 1
            except Exception:
                continue
    
    # Delete collected rows
    for row_key in rows_to_delete:
        row = table.direct_row(row_key)
        row.delete()
        row.commit()
    
    remaining = total - deleted_count
    return str(remaining)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=8080)

